// Copyright 2014 AdRoll, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package remote

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _self_signed_ca_cert = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x94\xc9\xb2\xaa\x48\x10\x86\xf7\x3c\x45\xef\x89\x0e\x10\x14\x61\xd1\x8b\x9a\x18\xea\x58\x60\x31\x09\xec\x0e\x20\x88\x38\xa0\xa8\x0c\x4f\xdf\xdc\xd3\xbd\xe8\x1b\x5d\x11\xb9\xa8\x3f\xff\xaa\xc8\xc8\x2f\x32\xff\xfc\x75\x20\xb1\x1c\xf7\x0f\x44\xfc\xd0\x31\x1d\x04\x42\xf2\xa3\x0a\xcc\x71\xb0\x7f\x46\x08\x34\x5a\x0d\x06\x07\x82\x7a\x89\x10\xec\x60\xdd\x3e\x4e\x6d\x63\x19\x83\x0c\x01\xef\x87\x20\x24\x19\x83\x85\x05\x56\x11\x01\xc3\xc0\x03\xcb\xe8\x73\xa5\x9c\x84\xf4\x20\xd7\xb1\x15\xcf\x25\x82\x98\x87\x64\xc7\x40\xfb\x63\x82\x27\x86\xe2\x98\x8d\xf6\x0c\xca\xff\x7e\x86\x38\x39\x10\xcb\x04\x85\x72\xe9\xcb\x6b\x3c\x09\x85\x1a\x0f\xc5\x35\x7a\xe7\x87\x68\xb0\x4f\x85\xcb\x42\x3e\x32\x4c\x66\x86\xc1\x12\x5c\x39\xfc\x68\xd1\xef\xda\x19\x52\xe6\xb7\x83\x39\xa4\x58\x88\x39\xc7\x18\x42\x27\x57\xc6\x4f\xa6\xd2\x53\x1e\xc0\x28\x4b\x5c\xd9\x21\x2e\x64\x4b\xe9\x88\xa7\x78\xf1\x58\x64\xa0\x71\x34\x93\x8a\x41\xd9\x42\xc1\xc3\x0a\x9c\x5c\xc5\x9c\x50\x01\xf8\x29\x4f\x23\x38\x7f\x1f\x46\x25\x4b\xe8\x5c\x26\x70\xca\x82\xcd\x2b\x0b\x97\xbe\x04\xce\x80\x79\x4a\xbf\xee\x99\x73\xfa\x14\x2e\xe0\x04\x42\x0e\x70\x5d\x93\x3d\xc0\x4b\x9e\xdf\x91\xb0\x5c\x20\x60\x7b\x73\x2c\x7b\xff\x1a\x6e\x8e\xe8\x39\x5c\xe3\x22\x62\x66\x17\xba\x59\x14\x2b\x5a\xc4\x56\xc7\x63\xbb\xee\x3b\x0a\xa7\xe7\xee\x4b\x91\x54\xdb\x19\xab\xfd\xdd\x18\xca\x86\xf6\x9a\x70\xa3\xcd\x37\xbb\x66\xde\x4d\x6f\x90\xf2\xb8\x1d\x8c\xf9\x3a\x60\xdc\x29\xa0\x42\xdb\x9d\xbd\x56\xe5\x0f\xf2\xe7\x14\x63\xd3\x35\x0f\x5f\xda\x3b\x79\xa4\x7b\x7e\x2d\xb6\xaf\xea\x78\xbd\xc1\x17\xf0\x04\x7a\x1b\xdb\x58\xcc\x63\x2f\x7f\xf4\x55\x7e\x76\x65\x76\xc3\x81\xf7\xaa\x81\x6c\xaf\x59\x9b\x4e\x59\xa6\x26\x1a\x7b\x56\xba\xf2\xd1\xca\x37\xa0\x93\x9c\xaf\x4e\x67\xb0\xbd\x93\x8b\x91\xdc\x7a\x4f\x10\x8b\xc9\xf6\x6a\xcd\xd0\xb5\x57\xc0\xef\x3a\xba\x8c\x19\xe4\x50\x7e\xea\xec\xb3\x76\x36\xfc\x32\x4c\x12\xf2\x1b\x6b\x4a\x72\xc7\x1e\xda\xd2\x2e\x9a\xf1\x9e\x64\x9b\xe6\xbe\x91\x95\x98\xbc\x74\xc1\x74\x3b\xe8\xae\x4d\xa2\xc0\xad\xfb\xb8\x97\xf4\x2a\x9a\xbc\x93\x44\x5d\x9d\xc2\xbc\xda\x5d\xfa\xb1\x35\xca\x06\x98\x6e\xbe\x35\x2c\x3b\xa1\x0d\xad\xe7\x54\x44\x91\x6a\x4a\xb0\x3b\xcd\x56\x23\xac\xa5\xdc\x05\xf2\xea\x9b\x93\x44\xac\x57\x4e\x6e\xd9\x5d\xf3\x9e\x43\xec\x53\x82\xc0\x40\x00\xf8\x66\x5b\x86\xdb\x01\x2f\xcc\x63\x5f\x0e\x01\xb7\x25\x08\xa2\x61\xc9\x41\x69\x5e\x7a\x00\x6b\x37\xb6\xb9\x0e\x41\xa5\xff\xc2\x81\xc0\x9d\x0f\x66\xfd\x63\xbe\xfc\x63\x1e\x06\x54\xa7\xce\xd7\x90\x2e\x08\x23\x7b\x79\xf8\x1b\x5a\x61\x61\xbb\xfb\x97\x2d\x04\xe0\x5d\xe5\x97\x70\x75\xb2\x34\xe3\xa3\x4a\x11\x0e\x8e\xe9\x1e\xbf\x94\x4c\xd7\xd6\x64\xb5\x3d\x3d\x76\xc3\x6e\x4c\x02\xa2\x9d\xe5\x53\x3f\x67\x97\x8d\x65\x04\x42\x60\x1e\xe8\x44\xcc\xee\x48\x4a\xc7\xa1\x1d\x8a\xd3\x13\x39\x78\xd1\x65\x57\xfb\x5c\xcb\x22\x30\x71\x55\x54\xfa\x0d\x3d\xc3\x9e\x3e\x42\xe6\x05\xb2\x29\xc6\x7e\x0c\x3e\x4a\x89\xba\x2f\x7f\x14\x7a\x91\xd9\x98\x4a\xbc\xa2\x7c\x53\x33\xbd\x48\x3f\xb2\x7a\xef\xc1\x2e\x8e\x0b\x8f\xf3\xa6\x62\x5a\xbc\x3d\x39\xd1\x3e\xda\xc4\xe5\xbc\x17\xcf\xb7\x82\x9c\x3f\x5f\xdb\x64\xf3\xed\x15\xef\xb7\x6f\x08\x5a\xa3\x37\xdf\xaa\xb1\xcc\x08\x28\xd1\xbb\xca\x3a\xef\xb3\x02\x6e\xfb\x8a\x60\xaa\xd9\x9a\x98\xef\xc3\x6e\xd5\xed\xfc\xde\xf3\x5b\xed\xb9\x61\x39\xf1\x1f\xdd\x23\xd3\x03\xa7\xce\x13\xf5\x9c\x00\x21\xc9\x12\x11\x6f\x25\x39\x09\xbb\x17\x59\x4d\x57\x0d\xbd\x57\xe1\x48\xf7\x7c\xf4\xdf\x79\xfb\xb8\x48\xd3\xd3\x32\x1e\x7d\x5f\xad\x37\x54\x3a\x7f\x3e\x12\x45\x5e\x60\xd6\xcb\x90\x76\x22\x70\x46\x4b\x98\xb4\x6d\x5d\xfb\xfd\x68\xcb\x67\xe0\xc9\x4f\x1f\x2a\xa3\x95\xd0\xf6\xde\xbd\x47\x57\x72\x2f\x92\x8b\xc9\x5f\xc2\xcf\xee\x21\x2e\xfe\xff\x3e\xfa\x3b\x00\x00\xff\xff\x59\x0a\xf2\x8e\xac\x04\x00\x00")

func self_signed_ca_cert_bytes() ([]byte, error) {
	return bindata_read(
		_self_signed_ca_cert,
		"self-signed-ca.cert",
	)
}

func self_signed_ca_cert() (*asset, error) {
	bytes, err := self_signed_ca_cert_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "self-signed-ca.cert", size: 1196, mode: os.FileMode(420), modTime: time.Unix(1423483025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _self_signed_cert = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\xcb\xae\xbb\xbc\x15\xc5\xe7\x3c\x45\xe7\x51\x15\x20\x09\x09\x83\x0e\x6c\x30\x60\x02\x84\x3b\x81\x19\xb7\x00\xe1\x9a\x1b\x06\x9e\xbe\x9c\x73\xfa\xaf\x8e\xda\x6f\xf0\x21\x59\x42\xcb\x1b\xbc\xd7\x6f\x2f\xf9\x9f\x5f\x0f\x44\x32\x36\xfe\x21\x20\xdb\xc5\x12\x16\x80\x8b\xbe\x55\x4a\xc7\x18\x99\x8b\x20\x80\x39\x2f\x00\xc1\x10\x14\xeb\xba\x03\x0d\x16\xf5\xa3\xac\x2b\x99\x27\x34\x04\xd6\x8b\x14\x09\x9e\x94\x05\x64\xb0\x30\x7c\x08\x74\x5d\xaa\xcb\x31\x91\xf9\x8e\x4a\x5b\xe9\x8d\x25\x38\x27\xac\xcd\x84\x3b\x7b\x48\xd8\x7d\x61\xd1\x68\x12\x17\x60\xfc\x14\xf7\x3a\xac\xa5\xda\x6b\xf9\x57\x22\xa2\x46\x17\x74\x19\x30\x1e\x12\x08\x49\x3d\xb6\xa1\xa9\xc8\x81\x4e\x14\x4c\x43\x18\xa8\x43\x22\x37\x74\xee\x40\x29\x69\xb3\x21\x69\xfd\x26\x6d\x9b\x4f\xb4\x20\x57\x5f\xbb\xff\xfe\x08\x90\xb3\xc5\x4a\xaf\x38\x88\xc6\xb4\x3d\x0c\xa1\x8b\x34\x4a\x07\xf5\xf7\x26\x2c\x75\xc1\xf7\xf5\x49\xba\x03\xef\xe7\xe4\x54\x17\x7d\xa3\x4c\x2a\x28\xaf\x5d\x7e\x42\xb6\x59\x42\xf6\x34\x29\x2e\x48\x7e\xdb\xa3\x04\x0b\x05\x62\x2b\xcd\xb1\x07\xcb\x48\x51\x57\x5f\x64\x2d\xe6\xdf\x3a\xdc\x5f\x45\x17\xd1\xba\x0b\xe6\x75\xd1\x86\x8b\x99\x8b\xdf\x7f\x69\xcc\x6f\x8d\x5a\xc5\x15\x90\x37\xa9\x2e\xb8\xff\x01\xa4\xc8\x3f\x80\xbe\xf8\x68\xab\x8d\x4c\xf6\xe7\xa4\x95\x5e\x5a\x2b\xd5\xe9\x17\x0b\xe1\x70\x4f\x58\xfa\x9b\x13\xf5\x17\xa0\x32\x1d\xbe\xfe\x80\xf2\x1c\x79\xd5\xd8\x6c\x0e\x03\xba\x70\x03\x69\x48\x3a\xbb\x8c\x83\x43\x93\x76\xfa\x84\x16\x60\xff\xe7\x07\x85\x2e\xd4\xab\x5f\xb9\x69\x93\x9d\xfa\x89\x03\x34\x09\x0b\x50\x7f\xf6\x42\x17\x34\xbe\xab\xdb\x21\x91\x40\x28\xfa\x96\xa5\x88\x80\x71\xc3\x60\x5f\xd8\x9d\x5a\x52\x49\x6b\x0c\x29\x6b\x8c\xba\x83\x09\x06\xa1\x7a\xee\x23\x5c\x8e\xa9\x01\xac\x1a\x4a\xa5\xd1\x27\xec\x34\x46\x3b\xb5\x4c\xfe\x97\x11\xc6\x10\xdf\xbf\x2d\xfc\x0e\x0c\x92\x00\xb8\x08\xc0\x3a\x81\xaf\x02\xa1\x38\xaf\xef\x08\x74\x19\x23\x72\x7c\xe8\x2c\x87\x9c\x19\x4e\x6c\xc3\x74\xdc\x79\x5b\x77\xf0\xe9\xde\xaf\x54\x91\x1b\xe4\x98\xbf\x9f\xde\x4b\x57\x94\x07\xbd\xed\xc4\xa7\x17\x26\x83\x4b\xe3\x0f\x5d\x19\xf3\x7e\x50\x2d\xfb\x19\x71\x9f\xf5\x9c\xab\x1b\xe4\xae\x67\x36\x34\x54\x6c\x2d\x7a\x79\x76\x1f\x32\xeb\x14\x6c\x71\x1e\xf3\x53\xaa\xe6\xda\xd6\x12\x67\x45\x70\x71\xc4\x91\xb7\xf1\xde\x3c\x04\x24\x57\x6c\xbe\x31\x32\xff\xf6\x3c\xce\x3b\xf9\xc0\x9b\x92\x70\x4d\xd2\x71\x30\xa5\x8c\x3d\xee\x4e\xd3\x83\x6c\x28\x2e\x8b\x37\xc7\x78\x3c\xe2\x05\x0a\xbd\xa2\x2e\x27\xda\x13\xb7\x79\x70\xf2\x96\x64\x40\xe1\x35\x62\xcc\x59\x30\x8a\x34\x99\x85\x3d\x67\x9a\x00\x75\x35\x88\xb4\xf3\xbe\x8a\xfa\x65\x7e\xfb\xbb\x91\x7a\xa5\xee\x4d\x79\xed\xf3\x79\xb7\xc4\x92\x74\x4b\x9f\x7b\xd7\x5c\xb8\xe7\xc5\x29\x99\x21\x2b\xae\x42\xcf\x29\xd2\xcd\x3a\x16\xe7\x0d\x30\x9f\xcc\x6e\x38\x39\xfd\x93\x68\xd7\x4d\xbf\xf3\xbc\xc1\xdd\xb6\xd4\xa8\xcd\xbe\x3a\xdd\x69\xef\xa2\xfb\xd1\x2e\x6f\x1a\x21\x8b\x6f\xc8\x39\x8e\x49\x64\x6f\xec\x23\x3a\x3f\x66\xce\x36\x5f\x1e\xde\xaa\x79\xf9\x7e\x3f\xde\x75\xdf\x79\x1b\x66\xba\x13\x2c\x02\x0b\x40\xaa\x67\x68\x12\x2c\xe0\xf2\x35\x73\xc5\x3a\x41\x70\x3b\xa1\x35\x8d\x02\xdc\x03\x22\x15\xeb\xdc\x6d\xba\x01\x96\xb2\x85\x80\x10\xa1\x08\xf1\x99\x84\x10\x5a\x9e\x02\x08\x22\xba\x15\x8a\xd4\x5a\x60\xaf\xee\xc9\x19\x23\x1c\xff\x37\x75\xac\xf0\x37\xe3\x4c\x28\xd1\xfa\x1d\x1e\xa4\x41\x0b\x88\x45\xb1\x36\x81\x6e\x47\xc3\x6f\x94\xb9\x3c\xd6\xee\xf9\xa1\x32\x5e\x91\x75\x07\xcc\x63\xbc\x33\xe3\xe9\xc4\xf9\x38\x30\xb2\xad\x21\x52\xea\x29\xc6\xc5\xf0\xec\x5a\x26\xcd\xef\xca\x70\xb4\xb7\xa9\x3a\x07\xcc\xd5\x1a\x5e\x11\xfb\x90\x9a\xa9\xb5\x27\x58\x55\x74\xf5\xe9\x37\x8e\xba\x18\xb5\xf1\xd2\xfa\x2b\xe9\x41\xb5\xf5\x3e\x16\x4a\x28\x9a\xb6\xba\x5d\xd1\x47\x3c\x6c\x33\x6d\x4c\xad\x4f\x5b\x14\x7b\x57\xde\xf3\x37\x19\x79\x9a\x43\x90\xc6\xb3\xa2\x92\x3d\xba\x2e\x4c\xc7\x3b\xc8\x18\x9e\x8d\x0d\xb6\x52\x6d\x31\x22\xf6\xe6\x9e\x52\x1c\x9e\x7d\x33\xbe\x90\xe5\xb1\x19\xdb\x48\x29\xca\xd3\xbe\x95\xe8\x9e\x64\x9b\x32\x38\x70\xbd\x29\x0e\xd7\x7a\x64\xee\x07\x7b\xdb\x71\xed\x43\xdf\x5e\x5c\x7d\x76\xde\xbd\x17\x66\xf5\x72\xb0\xac\x8c\x62\x3d\xa5\xae\x2a\x41\x83\xa7\xbe\x8a\xa1\xd9\x7a\xa3\xc5\x5d\x9d\xab\x33\x4d\x8f\xc1\x20\x5e\xd0\xa9\x6e\x4c\x36\x19\x2b\x39\x3e\x9f\x14\xcf\xa2\xe3\x99\x39\xd9\xbc\xd4\xcf\x73\xd8\x5c\x79\x12\x50\x2d\x3f\xe8\x44\xbb\x6b\xa6\x9b\xb3\xf9\x55\x1e\x98\xe8\x11\x24\x47\x2c\x7c\x8a\x8b\x2f\xbb\x19\x1c\x87\x82\x05\xa4\xe2\x32\xe3\x01\xaa\x7b\xf8\x2f\xea\xfb\x32\x47\x86\xf8\xff\x17\xfc\xbf\x03\x00\x00\xff\xff\x1d\x30\x48\xee\xfd\x05\x00\x00")

func self_signed_cert_bytes() ([]byte, error) {
	return bindata_read(
		_self_signed_cert,
		"self-signed.cert",
	)
}

func self_signed_cert() (*asset, error) {
	bytes, err := self_signed_cert_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "self-signed.cert", size: 1533, mode: os.FileMode(420), modTime: time.Unix(1423483025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _self_signed_key = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x12\xab\x68\x0c\x85\x7b\x9e\xe2\xf6\xcc\x0e\xfc\x60\xc0\x94\xe4\x9c\xc1\x06\x3a\xb2\x4d\xce\xe9\xe9\xd7\x7b\xeb\x55\xab\x19\xcd\x99\x23\xe9\x7c\xff\xfc\x57\xac\x20\x29\xe6\x1f\xd7\x63\xfe\xd8\xae\xf2\x62\x7c\xe1\x8f\x26\x44\x7f\x3b\x90\xa1\x28\xc2\x70\x28\x2c\xc3\x68\x1c\xe3\x08\x4c\x9f\x03\x9e\xa4\x23\xef\x26\x0a\x30\x3e\xb1\x16\xf4\xa4\x86\x34\x3d\x3b\xfb\x75\x58\x15\xe6\x41\x15\xeb\x1c\x2c\x86\x2c\x4f\x28\xd2\xf3\x73\x00\x45\xe9\xe8\xa3\xca\x86\x7e\xcd\xeb\x31\xaa\x8e\x3b\xc7\xe4\x56\x35\x53\xe8\xbf\x0b\x3f\xb0\x5b\x94\x95\x5d\x3d\x5e\x02\x77\x88\x00\xb0\x5c\xfe\xda\x8b\x67\xa6\x16\x3a\xe2\xf0\x97\xcc\xf9\x4a\x0c\x91\xc7\x6a\xae\xf0\xc4\x09\xd2\x17\x2b\x60\x33\x7f\x95\x33\x75\xe1\x12\x41\xdb\x22\x17\xa6\xd9\x3e\xda\x62\x8e\x51\xf8\xf3\x9c\x0e\x98\xcc\x13\x98\x4a\x76\x4a\xb9\x59\x6e\x90\xd5\xfb\x89\x06\x3c\x84\x14\xef\x67\x70\xa7\xa3\x10\x85\x31\xb0\x2f\xce\xac\xb2\xf4\xe2\x1e\xa4\x6d\x33\x42\xdf\x30\xb1\xae\x3d\xbe\xf1\x70\x5f\xeb\x0b\xdf\x97\xcc\x2f\xe5\xe5\x51\x5c\xf8\x9d\x88\x62\x99\xcd\x0f\xdf\x86\x6e\x72\xb6\xbc\x0f\x18\xf3\x2a\xe4\x06\x52\x16\x4b\x87\xaa\x34\x98\xb1\x67\x80\x8f\x4f\x6f\x98\x0f\x3d\x84\x07\x3c\x08\x46\x1f\xe9\x76\xfd\x7a\xa9\x67\x8d\x06\x96\xf1\x8a\xf1\xa2\x6d\xb9\x3c\x81\x4a\xc1\xa3\xf6\x34\x76\x61\x97\x12\xb4\xe9\x22\x5d\x7b\x09\x14\x44\x2d\x3e\xeb\x3a\xad\xcd\xd0\x07\x30\x38\xeb\x43\xe1\x19\x87\x61\x99\xe1\x67\xb6\x60\xa8\x81\x75\xe2\x7c\xd2\xb7\x94\x5a\xf1\x50\xfe\x4d\xd7\x2d\x39\x0b\x2b\x4b\xf4\xf7\xf2\xed\xab\xe9\xd9\x9e\x38\xbd\xf7\xf5\xe7\x3b\xc7\x04\xea\xda\xe5\x2d\x17\xec\x1d\x1c\x35\x1f\x55\xc0\x4d\xb0\x4f\x03\x33\x83\xc3\x2f\xc7\x48\xc5\x14\x0e\xe9\xc0\x58\x08\xc0\x58\x0f\x7c\x37\x79\xfe\x93\x57\x6c\x76\xa3\xda\xb0\x71\x96\xa6\x04\x61\xe1\x98\x36\xa8\x1e\xa1\x8c\xd9\x89\xd0\x99\x4d\xa9\xae\xf7\x3c\x9e\xd4\xd3\xc2\x6b\x72\x9e\xcd\x46\x87\x78\x74\x6c\x6f\x63\xfb\xb4\xac\x7d\x02\x07\xd3\xaf\xe4\xc0\xb1\x12\x56\x23\x4b\x5a\xee\x1c\xc3\x57\x14\x87\x85\xa4\xb6\xed\x68\x92\xc1\x9e\x72\xe5\x3b\xe0\xaf\xdb\x41\x33\x22\x5b\x4a\x41\x6b\xa1\xd4\x57\xf2\x3b\x0c\x1c\xd5\x28\x99\x5d\x91\xc4\x87\xc1\xe3\x0b\x6e\x3a\x59\x3a\x73\x0f\xd3\x64\x2f\xf3\x23\xae\xce\x3d\x52\x35\xd8\xe6\x33\x30\x85\xf7\xf2\xa1\xd4\x4b\x9a\x46\xea\x29\x77\xc8\x0e\xdd\x4a\x18\xd5\xbb\xe5\xe5\x5b\xf1\xfa\x7a\x88\x1e\x08\xca\x45\x45\xef\xb8\x4a\x5c\x4d\xa7\xab\xd7\x81\x2f\x82\x13\x66\xc8\xe1\x1a\x83\x80\x86\x6d\xa5\xac\xc5\x67\xef\xd1\xa5\xa1\x03\xad\xd6\x09\x08\x8e\xe5\xbe\x91\x04\xae\x8a\x04\xe6\x3a\x9c\xb7\xd2\x34\x06\x56\x10\xca\xb7\xc5\x96\xb2\x1a\x5a\xeb\xd3\x33\xfe\x96\xb4\xe8\x65\x85\xd6\xfa\x99\x98\x98\x9e\x3c\x32\x67\x75\x89\xb0\x0d\x22\xd5\x20\xe5\xf8\x5e\x32\x51\x45\xfe\x58\xa4\xe8\xc7\x30\x26\xc5\xea\xb8\x3c\xd4\x32\x9e\x33\x35\x95\x4b\x93\x67\xea\x68\xcb\x07\xbc\x85\xe1\xe9\xe5\xd3\x3e\xbe\x53\x3a\x39\xf6\x83\xab\x19\x32\x25\x1c\x12\x92\xce\xa7\x0e\x4b\xde\x4b\xd9\xf2\x74\x03\x0f\xb4\x90\x09\x65\x7d\xa0\x0c\x5b\x8f\x93\xaf\x20\x01\xd5\x3d\x59\xf3\x58\x03\x5d\x6f\xb2\x0d\x56\xc4\xdf\xc6\xc2\x64\xcb\xfe\x2a\x3e\x4f\x8e\x85\x0c\x8c\xb1\xf5\x24\xee\x4c\x77\x9b\xf1\x0c\x6d\x3d\xa7\xde\x84\x00\x35\x48\x5a\x95\x08\xa5\x0c\x19\xac\x59\x17\x7f\x48\xcc\xf1\x06\x03\xd6\x77\xdd\xbe\x1a\x60\x94\xbb\xf5\x52\x92\xcc\x47\x64\x88\x3f\x69\x4d\x12\x73\x1e\x31\xed\xfb\xcd\xaf\x48\x82\xd9\xc1\x90\xf8\x16\x7a\x46\x69\x7d\x1f\xe4\x3b\x75\x24\xa5\x2c\xcb\x80\x71\x17\xf0\xda\xcf\x2d\xe5\x1b\x2d\x39\x36\xf1\x78\xcd\x02\xfc\xf6\x20\xba\x17\x2b\x59\xbf\x66\x09\x8f\x40\x2c\xd1\x19\x2e\x7a\x36\xf7\xd8\xdc\x18\x6e\x24\xe9\xf2\xf8\x15\xe8\x02\x38\x9b\x9f\x64\xf6\xae\x09\x7d\x05\x77\x43\x56\x7c\xaf\x34\x81\xed\x9f\x3f\x27\xa0\x7b\x23\x89\x6d\xa3\xca\x32\xc7\xbf\x07\x5f\xec\xfe\x52\xc5\x8f\x06\x6f\xe9\x94\xcb\x4f\x56\x3b\x31\xe5\x0c\x84\x24\xc9\xd2\x8a\xa8\xbf\x7e\xdc\x45\xa5\x6c\xf4\xef\x44\xcf\x98\x22\xa6\x55\xd2\x87\xf6\x62\x7e\xef\x04\x19\x18\xc2\x3b\x55\x34\xb1\x41\xe4\x92\xf4\x39\x57\x93\x24\x3b\xe5\xd2\x9d\xee\x6b\x29\x56\x0b\x86\x9b\x50\x91\xd2\x82\xe2\xfb\xd8\x0b\xfb\x8b\xa8\x59\xe7\xf7\x1e\x6d\x7f\xdf\x10\xad\xa6\x77\x7e\x13\x2d\xb9\x04\x9f\x24\x19\x7f\x19\x20\x49\xe6\xa1\xb1\x15\xdb\x46\x9a\x3a\x13\x04\xe2\xdb\xcf\xc5\xac\xac\xa1\xd3\xee\xdf\x17\xd6\x63\x09\x7c\xac\x7c\x13\x39\xc2\x5d\xcf\x97\x0e\xc5\x2b\xfe\xe9\x61\x5f\x50\x2f\xa5\x54\xe2\x60\xc4\x92\x24\x44\x4c\xa4\x91\xc9\x8e\xaa\x1d\x4f\xc6\xd1\xe7\xc4\x7b\xe1\x9c\xb7\x95\x59\xdc\x56\xcc\x35\xe2\x14\x34\x73\x7e\xa7\x2e\x86\x8f\x29\x0d\xe9\xda\x84\x95\x12\x93\x2e\x2c\x9c\xf0\xbe\xb7\x6b\x26\x26\xc6\x7d\x1d\xe2\x4f\xe5\x38\x64\xe0\x30\x95\xd7\x0d\x86\xda\x05\x7d\xb8\x8b\xcf\xed\xd5\x29\xbc\x7c\x0b\x96\x54\x13\x1f\x20\xa6\x8c\x0a\x55\x69\xfc\x0b\x0a\x89\x65\x34\x17\xa4\x55\x1c\xb0\x46\x3b\x9c\xa0\x2a\x4e\x5d\xd6\x58\x2e\x78\x20\x61\xc8\x59\x8f\x23\x33\x0d\x01\x76\xed\xae\x8e\xf0\xb6\xb8\x11\x30\x62\xbc\xae\x6c\x1b\xd2\x40\x4b\x18\x92\xfe\xca\xb4\xa0\x9c\x41\xb4\xb8\xbd\x76\xf6\x5b\x0c\x68\x80\x13\xcc\xc3\x81\x55\xba\x2f\xb6\x3a\x5d\xf4\x06\xd8\x3d\x95\xcb\x20\xbf\xa7\xb0\x5d\x65\x49\x15\xc2\xbc\x63\xa9\xdf\x80\xfb\x77\xa6\x1b\x37\xcc\x06\x8b\x3a\xa2\xc0\xbc\xf5\xfe\xd3\xac\x82\x28\xda\x2d\xeb\x35\xa7\xfd\x90\x52\xa6\x80\xbb\x50\x1f\x02\x54\xb8\xe9\xd2\xf2\x28\x6c\x85\xfe\x22\x45\x30\xf9\xff\x47\xcd\xbf\x01\x00\x00\xff\xff\x3f\x9c\xf5\xf7\x8b\x06\x00\x00")

func self_signed_key_bytes() ([]byte, error) {
	return bindata_read(
		_self_signed_key,
		"self-signed.key",
	)
}

func self_signed_key() (*asset, error) {
	bytes, err := self_signed_key_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "self-signed.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1423483025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"self-signed-ca.cert": self_signed_ca_cert,
	"self-signed.cert":    self_signed_cert,
	"self-signed.key":     self_signed_key,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"self-signed-ca.cert": &_bintree_t{self_signed_ca_cert, map[string]*_bintree_t{}},
	"self-signed.cert":    &_bintree_t{self_signed_cert, map[string]*_bintree_t{}},
	"self-signed.key":     &_bintree_t{self_signed_key, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
