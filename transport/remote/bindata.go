// Code generated by go-bindata.
// sources:
// self-signed-ca.cert
// self-signed.cert
// self-signed.key
// DO NOT EDIT!

package remote

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _selfSignedCaCert = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x95\xc7\xae\xbb\x4a\x1a\xc4\xf7\x3c\xc5\xec\xd1\x88\x60\xe2\x62\x16\x0d\x34\xc9\x04\x03\x0d\x06\x76\x24\x03\x26\xd8\x80\x4d\x7a\xfa\xd1\xff\x1c\x69\xee\xd5\xdc\x5e\x7e\x25\x95\x7e\xdd\x5d\xfa\xea\xdf\x7f\x8e\x04\x35\xc3\xf9\x97\x0c\x7d\x64\xa8\x86\x0c\x10\xfc\x99\x62\xb6\x61\xa8\x99\x22\xcb\x80\x02\xb2\xec\x29\x53\x53\x27\x89\xbf\x17\xb7\xf4\x04\x8e\x54\x77\x53\xd3\xb5\x9a\xb8\x91\x12\xf0\x16\x15\x28\x12\x6d\x7b\xcb\x26\x7b\x89\x12\x79\x9e\x06\x37\x33\xc2\xc2\x13\x5a\x36\xe8\x34\x40\x85\x50\x06\x9b\xec\x91\x70\x57\x9f\x20\x94\x6a\x27\x92\x40\x61\x2b\x91\xd3\xe4\xad\xa4\x15\x83\xfa\x4d\xe8\xfe\x4c\x68\x61\x57\x11\x40\xbf\xfa\xcb\xc6\x14\xa8\x76\xe1\x20\x2e\xb9\x2c\xe9\xc5\x20\x52\x85\x02\x6d\x1b\xbc\x7e\x0d\xb7\x4d\x09\x29\x53\xb5\x7d\x72\xd3\xb6\xc4\xbc\xbe\x52\xa3\x59\x0b\x07\x78\x9d\xa4\xd6\xec\x5a\xe8\x0e\xc0\x92\xbb\x7f\xe4\xf4\xbe\x58\x83\xb3\xe6\x08\x54\xea\x46\xee\xae\x02\x68\x5b\x31\x76\xe7\x0c\x2f\xf6\xb3\xc9\xd4\x8d\x3c\x6c\x04\x4e\xfb\xf9\xd7\xcc\xd6\x93\x5d\x3e\x81\x89\xfd\xa2\x24\x08\xf4\x11\xfa\xdb\xfd\x0c\x05\x98\x8a\x87\xe0\xdd\x96\xbc\x1f\x1a\x69\xdb\x9c\x90\x56\xbf\x06\x4c\x8f\xe4\xce\x3e\xb3\xd8\x79\xe6\x27\x8c\x30\x5b\xb2\x7f\x71\xeb\xcd\xf6\xee\x7e\xf0\x87\xc6\x80\xe5\x91\x5f\xa2\xcd\xf6\xb6\x4d\xae\x7f\x0c\x2d\x05\x38\x28\xec\xc2\x5d\x47\x20\xff\xfb\xe3\x62\xb2\x07\xef\xca\x20\x6e\x05\x29\x35\xa9\x6e\xae\xb9\xb6\x7d\x13\x5a\xfc\xd8\x86\x21\x1b\xcf\xff\xff\x09\xa8\x02\xe0\xca\xa0\x16\xc0\x1f\x5d\xae\xaf\x32\x06\x6a\x08\xde\x8d\xf6\x98\xea\xcd\xa8\x8b\xae\x58\x0e\xcf\x68\x22\xc0\x30\x1f\x6d\x64\x2e\xb4\xd5\xbf\x66\xe7\xee\x12\x49\x7d\xd8\x78\xc1\x19\x61\xd6\x1f\x81\xf6\xc9\x93\x97\xf9\xbe\xdd\xda\x4d\xc3\x0e\xda\x71\x95\x8a\x32\x77\x22\x7c\x31\x03\x8c\x15\xb1\x89\x58\x8a\xd3\x37\x57\x23\xa8\xa3\x15\xbb\xdb\xda\x7e\xcd\xfb\xc3\x97\xc8\x99\x81\xea\xf2\xe5\x6f\x28\x7e\x00\xf5\x01\x34\xef\xf5\xe5\x0d\xac\x41\xb3\xb0\xf9\x32\xd1\xce\x80\x9f\x82\x22\x22\xc7\xd2\x69\xc8\x29\xdd\x4a\x9e\xe0\xaa\x82\x12\x74\x83\x09\xea\xcb\x08\x0c\x52\x55\x1b\x99\x32\xa0\x1d\xb7\xda\x45\xe9\x21\x83\x3f\x96\x0f\xc4\x2e\x31\x79\x1e\xee\x9e\xbf\x25\x99\xce\xda\x4e\x3f\x9a\x09\x8f\xfa\x76\x37\x8b\xfb\x88\x3f\xf3\x94\x61\x0f\x58\x3e\xa4\x78\x27\x4c\xf1\x4a\x2d\x33\xf2\x54\x5f\x8d\xa3\x46\x9f\xf0\xd8\xb6\x89\x1a\x9b\xb5\x14\x4c\x19\xfb\xd0\x5a\xe1\x6d\xd0\xf1\x47\xf6\xbb\x1a\xe7\xd7\x4e\xf0\xa1\x3c\x13\x15\x57\xcf\xc0\x3a\x89\xc1\x34\x32\xd3\xad\x1a\xbd\xee\x70\xbe\xe2\xa1\x5e\x89\x84\x35\xe5\xe4\x2c\x62\x0e\xeb\x85\xc1\x54\x7f\x2e\xcf\xab\xb2\xbe\xd8\x1b\x39\x44\xc6\x37\x23\xef\xc1\x75\xc9\x23\x24\xb0\xf4\x1b\xd2\x9e\x7c\x21\xf2\x16\x2a\xfa\xbd\x09\xee\x26\x6e\xf8\xcf\x07\x6f\x4d\x9c\xef\xbf\xf3\x00\x23\x79\xa7\x17\x19\x56\x53\x0f\xea\x3d\xb1\xf4\xe4\x1f\xc4\xd4\xd1\xf2\x46\xbb\x87\xda\x14\xad\x18\x69\x51\xbd\x78\x9b\x8d\xbb\x0c\x35\x96\xfa\x90\x05\x8b\x65\xba\x4c\x94\xce\x7c\x10\x45\x7e\x82\x09\x7d\xd4\x79\xbe\x58\xbe\x0d\x1c\xaf\xb2\x33\x68\x4d\x0b\x9a\x86\x31\xcc\x36\x87\x83\xab\xb4\x20\x6a\x28\x09\x01\x5e\xd4\xee\xcd\x68\xc4\xd3\xae\xd4\xd0\xe9\x26\xe6\xcb\x5c\xec\x3c\xd5\x11\xc2\xfc\x25\x0a\xcd\x8b\x44\xc6\xf9\x61\x99\x4a\xc3\x15\xbd\xdb\x41\x4e\x38\x39\xc0\xad\x69\x50\x20\xda\x89\xbb\xbd\x5c\x00\x4a\x88\x78\xfa\x98\x61\x9e\x72\xec\x2c\xdb\xa1\x96\xf7\x03\xf4\xbc\x09\xbb\xf3\x08\x04\xac\x4e\xae\x19\x27\x57\xb2\xd3\xe1\x2e\xf7\xe2\x99\xf7\x0a\x9e\x99\xd6\x5f\xcb\x38\x97\xee\x0a\xe3\xee\x54\x63\xee\xb1\x32\xb0\x92\xb3\x56\xad\x79\x1c\x86\x3b\xb1\x2b\x98\x4e\x13\x8b\x25\x07\xb7\xeb\xea\x43\xbd\xbb\xd7\xf3\xc9\x15\x56\x53\xb2\xd0\x77\xc6\xa0\x46\xd6\x1b\x6f\x9d\x69\xfb\xa8\x8b\x3b\x69\xc1\xbb\xfa\xee\x65\x27\x83\x0d\x02\x80\xfe\x8a\x38\xf6\xbf\x6d\xf3\x93\x71\x08\x5a\x33\xa7\x20\xb1\x32\x25\xbc\x2c\xfa\x1c\xcf\x5f\xaf\x6f\x9a\xc5\x87\xeb\x6d\x76\x84\x52\xc7\x19\x9e\xa4\xd5\x53\xb8\xe1\xe2\x8d\x2c\x3e\xfd\x86\xbd\x6f\x8c\x72\xa3\xcf\x7b\xea\x57\x78\x6b\x5a\x57\x1e\xef\xb6\x53\x51\x33\x98\x31\xdd\xf9\x94\x72\x36\xd5\x61\x57\xf4\xee\xc7\x8b\xf0\x81\x1a\x3d\xbe\xa4\x45\x51\x19\x5d\x9a\xb2\x59\xea\x49\x8f\x18\x98\x77\x47\xb9\xe9\xb6\xc4\x59\xbb\x6a\xa8\x45\x11\x7f\x2b\xfb\x84\x21\x81\x92\xb9\x40\x32\x6d\x52\x65\xd2\x7b\x8b\x7f\xe8\x99\x78\x7f\x54\xa4\x23\xcd\x26\x18\xa0\x70\x57\x86\xd3\x77\xe8\x2b\xb6\xaa\x37\x5e\xef\x33\xcd\x82\x46\xd4\x7c\x49\x36\x2e\xa3\x25\x2c\x14\x25\x40\xd9\x4b\xf1\x7c\x9e\x79\x21\x2b\xe4\x01\x9d\xa9\xa4\x71\x23\xf8\xd4\xa3\x56\x78\x67\x89\x4e\x33\xed\xe6\x66\xc6\x2f\x0c\xe5\x5f\x2d\x9f\xf4\xa3\x21\x14\x79\x60\xcc\x81\x94\x8e\x50\xf6\xb4\x7b\x45\xeb\xb5\xcd\xc9\x51\x2a\x88\x0b\x1a\x7b\x4f\x9f\x55\xa1\x4f\x55\x66\x8b\x8c\xd3\xe7\x04\x81\xf6\x43\x97\xe7\x2e\x01\xe6\x11\x1a\xdc\x98\x37\xd5\x9e\xd4\x42\x6a\x7d\xae\x0e\x74\xbe\xf2\x43\x92\xd6\xda\x6d\xd8\x2d\x7f\x63\xe2\x87\x89\xc8\xe0\xf1\x54\xba\x83\x8d\xed\x41\xbf\x1e\xbe\xd9\x49\xa5\x2d\x14\xc9\x99\xa7\x98\x19\x5c\xab\x6f\x12\x07\x2b\x25\x22\xe2\xd1\xcf\xca\x73\x92\xf9\xab\x73\x83\x68\xde\x86\x04\x27\x33\xe5\x68\xbe\xdb\xc3\x5a\x4f\xb2\x7a\x18\x39\x55\xe2\xe1\x45\x11\x78\x2f\x90\x0b\x81\x2a\xc4\x11\x2b\x3c\xf9\x03\xef\x75\x3d\xc4\xeb\xe8\xbc\xa5\x48\xbc\x8c\xc2\x84\xa2\x66\x64\xad\xe3\x33\x07\x9c\x31\xf5\xd6\x4e\xc7\xa3\x3c\xaf\xb5\x54\x34\xbc\x43\x59\x9d\x23\xa1\x3e\x1f\xe5\xac\x9e\x89\x15\x6b\xa7\x6b\x19\x19\x17\x2d\x18\x69\x49\xb8\x18\xe6\x48\x6b\x85\x76\x94\x44\x43\x31\x78\xeb\x44\xbe\x7b\xca\xac\x2a\xa4\x5b\xde\xb9\xd7\x0c\x32\x56\x3a\xda\x03\x63\xba\x88\x20\x7b\x16\xdf\x55\x03\x53\x1d\x2b\xbf\xe8\x35\x1d\xa0\x95\x5f\x28\xdc\xb2\x6e\xeb\x24\x5c\xf4\x9c\x4d\x1d\xa6\xb5\x08\x0e\x72\x02\x70\xd1\x6e\x0c\xc4\xbe\xcf\xdc\x18\xe4\xf6\xed\xa9\xee\x74\x93\x32\xb8\x41\x20\x8e\xc7\x8a\xd3\x4d\x79\x74\xa4\x90\xa1\x7a\xdf\xe1\x76\xd9\xbe\x2e\x6a\xb5\x8d\x5c\x0b\x93\xaf\x7f\x7f\xae\x88\x71\xa8\x6f\x74\x28\xf3\x44\x97\x03\xbd\xca\xbd\x63\x9b\xdd\x59\x5f\x9d\xf0\x3f\xd8\x4f\xbd\x42\x47\xf9\x67\xe5\xfe\x37\x00\x00\xff\xff\x27\xfc\xae\x23\x8f\x07\x00\x00")

func selfSignedCaCertBytes() ([]byte, error) {
	return bindataRead(
		_selfSignedCaCert,
		"self-signed-ca.cert",
	)
}

func selfSignedCaCert() (*asset, error) {
	bytes, err := selfSignedCaCertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "self-signed-ca.cert", size: 1935, mode: os.FileMode(272), modTime: time.Unix(1527962491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _selfSignedCert = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xc9\xee\xab\xcc\x11\xc5\xf7\x3c\x45\xf6\x28\x32\x83\xc1\x78\x91\x45\xd3\xd0\xcc\x98\xa9\x19\xbc\x03\xcc\x1f\x6c\x26\x63\x86\xc6\x3c\x7d\x74\xef\x27\x45\x57\x4a\x16\x49\x6a\x79\xaa\x54\xa5\x5f\x95\x4a\xe7\xef\xbf\x42\x56\x35\xc3\xfd\x1b\x54\x83\xc8\x40\x06\x04\x91\xfa\x5b\xa5\x1c\xc3\x50\x5b\x05\x42\x30\xd4\x10\xfa\x8a\x8d\x84\x57\xfb\x6a\xcd\x9b\x76\x00\x57\xae\xdb\xa9\x69\x9f\xda\x95\x30\x32\xf0\x67\x04\x14\x99\x73\xfc\x99\x40\x3f\x53\x62\xdf\xd7\x54\x62\xc6\x14\x3e\x54\xdb\x01\xad\x06\x58\xac\x42\x40\xa0\xcf\xa8\x3b\x7a\x01\x2c\xd7\x6e\x2c\x83\xd2\x51\x62\xb7\x29\x9e\xb2\x56\xf6\x68\xcd\xb8\xee\xc8\x38\x69\x47\x11\x88\xfe\xca\x8f\x0e\xa5\xa8\xa8\xc5\xfd\x75\x2e\xa0\xac\x97\xfd\x95\x2d\x15\xd5\x71\xc0\xf8\x57\x43\x42\x14\xcc\x9a\xc8\x09\x18\xa2\x91\xcc\xb4\xc6\xbb\xd1\x6c\xa5\x0b\xfc\x56\x46\xb5\xb0\x95\xba\x0b\xa8\x2c\x09\xbe\x05\xb7\xcf\x76\xef\x6e\x45\x04\x2a\x44\x98\xfd\xa6\x00\xce\x51\x8c\xdd\x3d\xb0\xe0\x46\x5d\xfe\x5b\x8b\x54\xe2\x44\xf8\x5f\x9a\x63\x68\x8f\x5f\x38\xd4\x9f\x3c\xff\x0f\x0e\xf5\x27\xcf\x7f\x85\x13\x62\x62\x90\xdf\x43\x15\x45\xde\x47\xaa\xe0\xf6\xed\xce\x9b\x4d\x11\x0a\xef\x62\x08\xba\xb2\x17\x9a\x02\x0a\xcd\x5d\x37\xb7\x42\x23\x6b\xc6\x5d\x97\xff\x61\x07\x10\x82\xd0\x20\x8a\xff\x67\xb1\x2a\xcb\x3e\x50\xea\x5a\xf5\xc0\xaf\x73\xfb\x23\xac\x6b\x55\x06\x76\x1d\xb0\x70\xfa\xa1\x86\x6a\x60\xcd\x8b\x1f\xa3\xfc\x10\x72\x3f\x4c\x8a\x83\xb0\x59\x00\x42\xc2\xdb\xa2\x31\xce\x5a\x0b\x26\x34\x29\x2f\xe8\x3d\xd9\xa2\xbe\x7d\x92\x37\x8b\x70\xfb\xea\x1a\x65\x82\x9c\xd5\xa4\x4f\x8a\x37\xe2\xcc\x52\xb4\xca\x3e\x5b\xf3\xa5\xf7\x87\x02\xd6\x23\x03\xf0\xe2\xa5\xd1\xb2\x4e\x17\x4f\x55\xae\xca\x71\xce\xcf\x7a\x5e\xe6\x35\xe3\xcf\x11\x3b\x99\xac\x44\x07\xb2\xa0\xbd\xf7\x0b\xca\xa9\xe1\x07\x76\xec\x97\x20\xff\x47\x7f\x5e\xc4\x4a\xb1\xe1\x0a\xa0\x71\x4d\xa4\x47\xec\xf5\x90\xcf\xad\x24\x96\xd7\x69\x16\xac\xed\x7a\x7f\x1d\xb9\x62\xcd\x66\x9f\xe1\xe8\x79\x89\x03\xb4\x3c\x8f\x8a\x7a\xb1\x51\x7c\xc2\xb3\x75\x0e\x87\x0c\xe7\x47\x47\x9e\xa1\x2e\x61\x95\xbe\x0e\xaa\x23\xa8\x69\xbe\x05\x25\xe9\x2c\x2b\xb9\x5f\x40\xa5\x22\x11\x61\x3f\x22\xed\x49\x82\xdd\xfa\xa8\xf1\x7c\xf7\xa9\xfe\x7d\xac\xca\xad\xfa\x5c\xdf\xb3\x76\x2f\x3f\xa3\x55\x9e\xe8\x9b\x50\x32\x35\xf3\xac\x9f\x8a\xce\xca\x73\x17\xac\x63\x04\xfd\xc7\x76\x8b\xe7\x2d\x05\xa7\xdd\xb1\x6c\xfb\xe0\xee\xb1\xa4\xef\x5f\x8b\x42\x08\x75\x02\x67\x55\xbb\x4b\xd2\x22\x77\x20\x20\x2a\x00\xd1\x7f\x78\x24\x70\x83\xa0\x56\xc1\x10\x7c\x40\x2c\xda\xd3\xec\x97\x96\x78\xb5\x09\xd5\xe3\x58\x65\x5b\xac\xed\x1f\x93\x33\xf3\x34\xb9\xc9\xef\xde\xe5\xe5\x32\xeb\x1c\xeb\xa5\x1c\xd9\x77\xcd\xe8\x29\x08\x4f\x6c\xe7\x57\xdf\x27\xc7\x7e\xf0\xce\x64\x55\xf5\xdd\x0e\x31\x8f\x2f\xa1\x4e\x85\xf0\xee\x8d\x8b\xc9\xa7\x06\x57\xd2\x67\xab\x19\x5a\xfe\xa2\x18\x87\x0d\xb2\x6d\x94\x85\x6e\x89\xbe\x91\xc7\x43\x9a\xbb\xf1\x3f\x5a\x50\x26\x74\xa7\xdf\xdf\x5d\x61\xa0\xe2\xf9\x83\xbe\x0c\x06\xd4\xe9\x4b\xfa\xbb\x5e\x78\x60\x63\x69\x9e\xae\xb4\xee\x31\xc1\x4f\x43\xbe\x05\xcd\xb1\xd6\x1e\x8f\x7c\xe9\x56\x25\x19\xb3\x51\x7a\x55\xab\xed\xa7\x4c\xc3\x76\x9e\xd7\x07\x43\x65\xa4\x68\xf9\x0e\x54\xd8\x56\x9e\xa3\x32\x90\x9c\xd6\x9f\xb0\xbf\x96\x3c\xb1\x93\x22\x5d\x90\xca\xbd\x78\xe9\x81\xe7\xa9\x13\x50\x73\xbc\xcf\xf5\xc0\x9f\x3f\x8d\xc6\x46\x73\xea\x8e\x55\x13\x2d\x12\xc2\x78\xf1\x24\x8a\x76\x11\x46\x55\x12\x0c\xfe\xa2\x90\x85\x41\xfb\x99\x97\x5f\xe2\x6d\xd0\xf1\xa9\x14\x24\x84\x95\x94\x39\xb1\x3f\xe6\x66\x37\x7d\x79\x29\xd0\x11\xdf\x96\xdc\x4c\xdc\x75\xc1\x67\xf1\x64\x46\x0d\x35\x8b\x17\x5e\x61\xec\x97\xd4\xde\x03\x43\x8b\x8d\x09\x01\x28\x96\xd5\x3a\xe4\xfe\xb9\x63\x37\xdd\xe5\xc4\x51\x63\x60\x92\x25\x9c\xbf\xfe\x88\x4d\x9e\x24\x57\xe1\x61\xae\x2e\x43\xd3\x46\x76\xc1\xd4\xd6\x7d\xf6\x86\x77\xb7\x56\x7f\x87\xdf\xa4\xbe\x34\x67\xa5\xd9\x82\xd6\x01\xa0\x66\xb4\xf0\x6c\xc7\xb9\x7a\x18\x92\xb4\x75\x66\xa9\xcf\x39\xed\x8e\xd3\x3a\x18\xc8\x4b\xe5\x30\x1b\xbd\xb2\x77\x29\x5a\x12\xe2\xdb\x55\x08\xdd\x99\x03\xf8\x31\x79\xda\xa2\xf8\xa9\xa7\xfb\xef\xe6\xfe\xb0\x6f\xde\xd7\x3f\xd7\xe2\x3d\x03\x56\x67\x1b\x49\x60\x6f\x9d\x0f\x5d\xd5\xaf\xac\x14\xec\xa4\x7e\x0b\x36\x4f\x25\x4c\x53\x9b\xfc\x3d\x94\x09\x74\xe8\x4a\xec\xd5\xd7\x76\x9f\xe8\xfe\x8d\x8a\x93\x18\x1c\xdc\xb3\xe5\x32\xe4\xbd\x9e\x87\xd9\x60\xcd\x56\x6d\x7a\x22\x27\x02\xbd\xd4\xf2\xe4\x2b\xc6\xd2\xbb\xa5\xdc\x8f\xd8\xf2\xf9\xf0\xa9\xce\x8c\x7e\xbe\xd2\xcb\x59\xfd\x90\x6e\xb8\xe9\x60\xb3\x43\xc3\xe4\xb5\x91\x96\xcc\xf1\xd8\x99\x2a\x92\x6f\xf3\xb1\x0f\x56\x95\x3b\xcf\x0d\x0c\x8c\xd1\xa3\x55\x77\x26\xaa\xdb\xc5\x77\xba\xdc\xfc\x60\xe8\xdc\xe9\xf8\x02\xce\xfc\x0a\xdb\xeb\xc5\x2f\x9a\xff\x0f\xea\xb7\x75\xa8\xae\xf2\xef\x76\xf2\xcf\x00\x00\x00\xff\xff\xd9\xf1\xff\x59\x6b\x06\x00\x00")

func selfSignedCertBytes() ([]byte, error) {
	return bindataRead(
		_selfSignedCert,
		"self-signed.cert",
	)
}

func selfSignedCert() (*asset, error) {
	bytes, err := selfSignedCertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "self-signed.cert", size: 1643, mode: os.FileMode(272), modTime: time.Unix(1527962508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _selfSignedKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xac\xd8\x02\x85\x61\xcf\x53\x1c\x4f\xdd\x6a\x72\x83\xb8\x82\x9c\xc3\x26\x83\x23\x43\xd3\xe4\x26\x3e\xfd\xd4\x1c\x3d\xcb\x2e\xf3\xbb\xef\x7f\xff\x8e\x13\x65\xd5\xfa\xe3\x7a\xec\x1f\xc7\x55\x43\xd6\x17\xff\xe8\x62\xf2\xf7\x81\x4c\x55\x15\xa7\x46\xe5\x58\x56\xe7\x59\x20\xb2\x3b\xa7\x04\xfa\x0c\x97\x54\x1d\x8c\x3f\x2e\x08\x57\xe7\x3b\x73\x5a\x7a\x38\x42\xd8\x8a\x9c\x21\x14\xc7\xd4\x75\x67\x06\xf8\x29\x9a\x6c\x53\x85\x21\x23\xdc\x59\xea\x97\x8d\x41\xe8\x79\x76\x24\xda\x93\x91\x2c\x52\x65\x14\x6d\xd8\x4c\x66\x4a\x1c\xcd\xf2\xec\x29\x5f\x6e\x3a\xff\x01\x9c\x87\x30\xa5\x8d\x51\xeb\x46\x03\x07\x71\x9c\x76\x6d\x4a\x68\xbe\x16\xc1\xe5\x2f\x27\x9a\xc6\xf8\x21\x45\xa5\xcf\x46\x65\x0b\x97\x92\xd6\xe3\xd8\x60\x43\x8e\xae\x8c\x63\x26\xcc\x4d\x27\x58\xf5\x83\xe6\x17\x1a\xc0\x89\x51\x4e\x73\x1a\xc8\xd4\xf2\xf4\x0b\xf4\x42\x07\xc7\x9a\xcc\xe5\x1c\xd2\xd6\xb5\x8d\x5f\x28\x46\x98\x61\x51\x4e\x68\xc5\x8c\x77\xae\xad\x5e\xb6\xee\x6a\xc7\xbc\xa6\xd6\x17\xf0\xdf\x58\x01\x9e\xde\x2d\x17\x46\x7a\xf8\x60\x9a\xd3\x11\xda\x38\x02\xc4\x53\xe8\x72\x0e\xef\xbf\x4e\x3d\x22\x31\xce\xbb\xbe\x7c\x36\xda\x84\x49\x52\x07\x36\x9c\xe9\xf7\xde\x9b\xf9\x79\x11\xef\xef\xe3\x09\x9e\xce\xab\x66\x1d\xc8\x77\x28\x53\xad\xa9\x71\x10\x46\x93\xd1\xcd\x14\xc2\x4b\x3c\xa7\xed\x70\xd2\x6f\x7c\xd6\x8a\x3a\x05\x41\x14\x8f\xc9\xfc\x16\x71\xae\xfc\x4d\xa7\x2a\xb0\x80\xe5\xd8\x49\xe5\x58\x51\x41\x41\x82\x21\xb5\x1e\x7d\x7d\x42\x28\x20\x27\x04\x4b\x84\x5a\xdf\x56\xa3\xbc\xbe\x93\xb6\x90\x09\x9c\xd6\xfe\x8a\xad\x29\xb2\xd5\xcb\xa4\x2e\x22\xe0\x02\xe0\x87\x47\x5f\xe8\xcd\xf9\x13\x07\x21\x94\xfb\x38\xa9\x80\x45\xc7\x09\xfc\x12\xa0\x1d\x59\x0a\xcd\xe3\xe5\x9c\x61\x44\x55\x4f\x29\x9b\x2c\xb1\x5b\x99\x9f\x46\x36\x56\x23\x4b\x8a\x9d\xb2\xae\xc6\x60\x5b\x55\x23\x03\x7c\xbe\x86\x98\x3e\xb0\x76\x05\xcb\xa9\xc6\x8a\x86\xc3\x3c\xb4\x6d\x0b\xd6\xdc\xaa\xd2\x9c\xdc\xa7\xd4\x71\xb5\x6e\xea\x1f\x95\x12\xfd\xb0\x7d\xb4\x50\x0d\x69\x73\xe8\x0f\xa6\x21\x4b\x23\x47\x8e\x84\x14\xfc\x04\xc3\xeb\x34\xca\xef\xb5\xc3\x7b\x72\xda\x01\x44\x3c\x6f\x44\xf6\x86\xf4\x25\xbd\xc4\xd8\xd6\xe0\x0e\x50\xf1\x97\xa7\x5a\x8e\x77\xf2\xbb\x72\x60\xc6\xfd\x1c\xed\xe5\xba\xe1\xc8\x0a\xcd\x01\x9a\x43\x59\x49\x71\x43\x0e\x47\x17\xdf\x37\xb3\x1d\x10\x7b\xb3\x93\x07\x83\xf5\xf9\x20\x48\xca\x52\x91\xa9\x90\x52\xab\x5b\xb7\x1d\x22\xf5\x7b\x68\x2e\x3e\x5d\xef\x91\x1b\xd9\x53\x53\x35\x7e\xe6\x86\xa5\xfa\xd9\x9f\xf5\x57\xfc\xfc\xd5\x21\x56\x4c\x82\x1e\x4d\x2c\x3b\x59\xe4\x9b\x44\x64\xdf\x28\xdc\xe1\xdd\x4f\x99\xaa\x5f\x88\x94\xb8\xac\x3a\x70\x77\xcf\x5f\x7d\xe9\xfb\xc1\x7c\x60\x9f\xce\x93\xf5\xc5\xc7\xfa\xcb\xa8\x0d\x4f\x22\xf7\x2a\x23\x25\x28\x35\x33\x8f\x39\xe7\x3c\x02\x01\xf2\x6a\x04\x40\x1b\xf4\xbb\xc9\xdc\xab\xca\xda\x49\xb1\xcb\xb5\x9e\x09\x38\xf5\x75\xf8\xc6\x03\x00\xe3\x06\xda\x04\xb4\xfa\x70\xb9\xb4\xe8\xe9\x0b\x56\x35\x01\xa2\x83\xc0\x01\xb3\x3f\xf3\x9d\xbc\x6d\xb7\x6d\xad\x81\x61\xae\xdb\xf4\x09\xad\x1c\x2e\x4e\xfb\x9c\x35\x0e\xe8\x36\x62\x6c\x7d\x73\x76\xf3\x4e\x5c\xdf\x7a\x36\x17\xe4\x6f\xf1\x65\xad\x2e\x34\x27\x22\x38\x1b\xcb\xcf\xd2\x0b\x16\x96\x48\xb7\x30\x1d\x14\xbe\x89\x2e\xc3\x1b\xb3\xc6\xbd\xf5\xf0\x87\xcb\x06\xd8\x1a\xad\x6d\x80\x3b\x32\x3e\xfb\xe8\x71\x64\xef\xfd\x0e\xda\x8b\x91\xd5\x14\x1a\x18\xdf\x14\x36\x36\x56\xd9\xcf\x66\x1e\xb7\x40\x77\xb8\x3c\x34\x72\xb6\x22\x59\xbf\x8b\xfc\x6b\x57\x5e\xa4\xcc\xb0\x84\x7c\x11\xba\xdf\x0c\xb5\x0e\x5b\x5e\x81\xc8\x8b\xf5\xb6\xd1\x0a\x18\x02\xf4\xd8\x34\x3a\xab\xef\x08\xb3\x29\x91\x7c\x29\x3a\x9b\xf0\x00\x96\xad\x7d\x2d\x2d\x9e\x37\xab\x5f\xb6\xc6\x4a\x45\xd0\x7c\x93\x70\x3d\x51\x84\x95\xa6\x95\x31\xf1\x59\x82\x37\x9b\x4e\x76\xe9\x32\x10\xda\xf8\xdf\x19\x4d\x31\x79\x93\x72\x1e\xc0\x49\x63\xfa\xaf\xd9\x4e\x84\xb4\xfa\xb4\x21\xea\xd7\x5f\x98\x3f\x5d\xbd\xef\x48\xd4\xe8\xf8\x8c\x90\x78\xc9\x1c\x71\x76\x92\xf1\x77\xd6\x4a\x4c\x7e\x41\x48\x5d\x5c\xe4\x1d\x68\x48\xdb\xe9\xaa\xe2\xd7\xce\xd7\xf1\x1e\x3c\x89\xc4\x3c\x42\xd5\x56\x52\xbd\x38\x4b\x18\x47\x74\x31\xb6\x0c\x16\xce\x24\xdb\x46\x96\x22\xdd\x7a\xbc\xba\xd3\x77\x99\xf9\x42\x0b\x7e\x95\xec\x3d\xc2\x97\x13\x03\xcb\xe8\xb0\x63\x21\x24\x13\xe8\x5c\x23\x36\x6e\x25\xf4\x93\x2b\x58\xbe\x35\x48\xfb\x3d\xda\x8d\xeb\x67\xef\xb1\xae\x3f\x85\x86\x72\xb8\xf4\xca\x29\x17\x78\xd0\x8d\x76\x5f\x59\x9e\xc8\x4f\x40\xb1\xc1\x8f\x5a\x51\x1a\xae\xf3\x58\x0e\x22\xef\x50\xc5\x61\x32\x1a\x0b\x75\x7b\x38\x96\xea\x71\x27\x64\x43\x7d\xd3\x35\x25\x11\xa5\xe7\xd7\x28\x47\x46\xaf\x02\x83\xb0\xcd\x12\xe1\x39\x5c\xde\xe0\x53\x61\x7b\x53\xa6\x1c\x02\x78\x61\xc2\x7c\xd2\xd7\x71\x34\xf1\x96\xa0\xee\x5a\xcc\xd6\xb9\xeb\x52\x42\x26\xd9\x19\x19\x18\xf6\xe9\x0f\x21\x2d\xbb\xaa\xb1\xa2\x50\xc6\xc0\x35\x3b\xc9\x6c\x1c\x1f\x48\xbc\xa8\x13\x99\xe4\x31\x9d\xb9\x9f\x9b\xe9\x93\xb3\xab\xee\x9a\xaf\x10\x82\xf9\xc5\x02\xe9\xb5\x92\xfc\x0c\x37\x9c\x19\xd3\x35\xa0\x98\x91\x49\x87\x54\x65\xd0\xe9\x8d\x1e\x4d\x35\x9a\xf4\xe3\xba\x43\xcf\x69\x2b\xdc\x7f\xfe\x05\x37\xb5\xc1\xcd\x73\xc4\xf5\xf8\x6e\x4d\x9f\xfc\x6b\xc9\xab\xc5\x2b\xcf\x92\x5d\xd8\xfd\x73\xb6\xfc\xb4\x31\x43\x2e\x80\xa4\x40\x03\x25\x0a\x43\x70\x4e\xbc\x70\x9c\x6d\x15\xef\x89\x6e\xad\x5b\x8b\x60\x70\x7e\x29\xd1\x0e\xb2\x29\x63\x01\xde\x55\x56\x35\xa9\x20\x77\xd5\x72\x59\x8b\xff\x43\x7f\x49\x11\x2d\xe1\xbf\xa9\xf9\x27\x00\x00\xff\xff\x26\xed\x47\xac\x8b\x06\x00\x00")

func selfSignedKeyBytes() ([]byte, error) {
	return bindataRead(
		_selfSignedKey,
		"self-signed.key",
	)
}

func selfSignedKey() (*asset, error) {
	bytes, err := selfSignedKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "self-signed.key", size: 1675, mode: os.FileMode(272), modTime: time.Unix(1527962514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"self-signed-ca.cert": selfSignedCaCert,
	"self-signed.cert": selfSignedCert,
	"self-signed.key": selfSignedKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"self-signed-ca.cert": &bintree{selfSignedCaCert, map[string]*bintree{}},
	"self-signed.cert": &bintree{selfSignedCert, map[string]*bintree{}},
	"self-signed.key": &bintree{selfSignedKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

